# Blueprint metadata
blueprint:
  homeassistant:
    min_version: "2023.6.0"
  name: Controller - IKEA E2213 SOMRIG shortcut button
  description: |
    # Controller - IKEA E2213 SOMRIG shortcut button

    Controller automation for executing any kind of action triggered by the provided IKEA E2213 SOMRIG shortcut button. Allows to optionally loop an action on a button long press.
    Supports deCONZ (untested), ZHA (untested), Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e2213#available-hooks) for additional details.

    📕 Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e2213).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.

    ℹ️ Version 2024.11.02
  # source_url: https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e2213/ikea_e2213.yaml
  source_url: https://github.com/bradfrumos/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e2213/ikea_e2213.yaml
  domain: automation
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    # inputs for custom actions
    action_button_1_short:
      name: (Optional) Button 1 short press
      description: Action to run on short button 1 press.
      default: []
      selector:
        action:
    action_button_1_long:
      name: (Optional) Button 1 long press
      description: Action to run on long button 1 press.
      default: []
      selector:
        action:
    action_button_1_release:
      name: (Optional) Button 1 release
      description: Action to run on button 1 release after long press.
      default: []
      selector:
        action:
    action_button_1_double:
      name: (Optional) Button 1 double press
      description: Action to run on double button 1 press.
      default: []
      selector:
        action:
    action_button_2_short:
      name: (Optional) Button 2 short press
      description: Action to run on short button 2 press.
      default: []
      selector:
        action:
    action_button_2_long:
      name: (Optional) Button 2 long press
      description: Action to run on long button 2 press.
      default: []
      selector:
        action:
    action_button_2_release:
      name: (Optional) Button 2 release
      description: Action to run on button 2 release after long press.
      default: []
      selector:
        action:
    action_button_2_double:
      name: (Optional) Button 2 double press
      description: Action to run on double button 2 press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_1_long_loop:
      name: (Optional) Button 1 long press - loop until release
      description: Loop the button 1 action until the button is released.
      default: false
      selector:
        boolean:
    button_1_long_max_loop_repeats:
      name: (Optional) Button 1 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_2_long_loop:
      name: (Optional) Button 2 long press - loop until release
      description: Loop the button 2 action until the button is released.
      default: false
      selector:
        boolean:
    button_2_long_max_loop_repeats:
      name: (Optional) Button 2 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    # inputs for speeding up short press events
    button_1_immediate_action:
      name: (Optional) Fire button 1 short press event immediately (on button down)
      description: Choose whether or not to fire the short press event as soon as button 1 is pressed down ("initial press"). This make the short press event fire sooner (immediately), because by default the SOMRIG shortcut button waits for a potential double or long press before it sends the short press action after a button press.<br><br>NOTE&colon; Leave this off if you want to use this button to both turn off a light with a short press and decrease the brightness with a long press, otherwise the light will turn off immediately even with the long press.
      default: false
      selector:
        boolean:
    button_2_immediate_action:
      name: (Optional) Fire button 2 short press event immediately (on button down)
      description: Choose whether or not to fire the short press event as soon as button 1 is pressed down ("initial press"). This make the short press event fire sooner (immediately), because by default the SOMRIG shortcut button waits for a potential double or long press before it sends the short press action after a button press.<br><br>NOTE&colon; Leave this off if you want to use this button to both turn off a light with a short press and decrease the brightness with a long press, otherwise the light will turn off immediately even with the long press.
      default: false
      selector:
        boolean:
    # helpers used to properly recognize the remote button events
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_1_long_loop: !input button_1_long_loop
  button_1_long_max_loop_repeats: !input button_1_long_max_loop_repeats
  button_1_immediate_action: !input button_1_immediate_action
  button_2_long_loop: !input button_2_long_loop
  button_2_long_max_loop_repeats: !input button_2_long_max_loop_repeats
  button_2_immediate_action: !input button_2_immediate_action
  helper_last_controller_event: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      button_1_initial: ['1000']
      button_1_short: ['1002']
      button_1_long: ['1001']
      button_1_release: ['1003']
      button_1_double: ['1004']
      button_2_initial: ['2000']
      button_2_short: ['2002']
      button_2_long: ['2001']
      button_2_release: ['2003']
      button_2_double: ['2004']
    zha:
      button_1_initial: [1_initial]
      button_1_short: [1_release]
      button_1_long: [1_long press]
      button_1_release: [1_long release]
      button_1_double: [1_double]
      button_2_initial: [2_initial]
      button_2_short: [2_release]
      button_2_long: [2_long press]
      button_2_release: [2_long release]
      button_2_double: [2_double]
    zigbee2mqtt:
      button_1_initial: [1_initial_press]
      button_1_short: [1_short_release]
      button_1_long: [1_long_press]
      button_1_release: [1_long_release]
      button_1_double: [1_double_press]
      button_2_initial: [2_initial_press]
      button_2_short: [2_short_release]
      button_2_long: [2_long_press]
      button_2_release: [2_long_release]
      button_2_double: [2_double_press]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_1_initial: '{{ actions_mapping[integration_id]["button_1_initial"] }}'
  button_1_short: '{{ actions_mapping[integration_id]["button_1_short"] }}'
  button_1_long: '{{ actions_mapping[integration_id]["button_1_long"] }}'
  button_1_release: '{{ actions_mapping[integration_id]["button_1_release"] }}'
  button_1_double: '{{ actions_mapping[integration_id]["button_1_double"] }}'
  button_2_initial: '{{ actions_mapping[integration_id]["button_2_initial"] }}'
  button_2_short: '{{ actions_mapping[integration_id]["button_2_short"] }}'
  button_2_long: '{{ actions_mapping[integration_id]["button_2_long"] }}'
  button_2_release: '{{ actions_mapping[integration_id]["button_2_release"] }}'
  button_2_double: '{{ actions_mapping[integration_id]["button_2_double"] }}'
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_device: !input controller_device
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{controller_entity}}{% else %}{{controller_device}}{% endif %}'
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
  # trigger for other integrations
  - platform: event
    event_type:
      - deconz_event
      - zha_event
    event_data:
      device_id: !input controller_device
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\":\".*\"|\"t\":\d+\.\d+)(,)?){2}\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
  # update helper
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_1_initial }}'
        sequence:
          - choose:
              # if immediate action is enabled
              - conditions: '{{ button_1_immediate_action }}'
                sequence:
                  # run the short press action
                  # fire the event
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_1_short
                  # run the custom action
                  - choose:
                      - conditions: []
                        sequence: !input action_button_1_short
      - conditions: '{{ trigger_action | string in button_1_short }}'
        sequence:
          - choose:
              # if immediate action is disabled
              - conditions: "{{ not button_1_immediate_action }}"
                sequence:
                  # run the short press action
                  # fire the event
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_1_short
                  # run the custom action
                  - choose:
                      - conditions: []
                        sequence: !input action_button_1_short
      - conditions: '{{ trigger_action | string in button_1_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_1_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_1_long_max_loop_repeats | int }}'
                      sequence: !input action_button_1_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_1_long
      - conditions: '{{ trigger_action | string in button_1_release }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_release
      - conditions: '{{ trigger_action | string in button_1_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_double
      - conditions: '{{ trigger_action | string in button_2_initial }}'
        sequence:
          - choose:
              # if immediate action is enabled
              - conditions: '{{ button_2_immediate_action }}'
                sequence:
                  # run the short press action
                  # fire the event
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_2_short
                  # run the custom action
                  - choose:
                      - conditions: []
                        sequence: !input action_button_2_short
      - conditions: '{{ trigger_action | string in button_2_short }}'
        sequence:
          - choose:
              # if immediate action is disabled
              - conditions: "{{ not button_2_immediate_action }}"
                sequence:
                  # run the short press action
                  # fire the event
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_2_short
                  # run the custom action
                  - choose:
                      - conditions: []
                        sequence: !input action_button_2_short
      - conditions: '{{ trigger_action | string in button_2_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_2_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_2_long_max_loop_repeats | int }}'
                      sequence: !input action_button_2_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_2_long
      - conditions: '{{ trigger_action | string in button_2_release }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_release
      - conditions: '{{ trigger_action | string in button_2_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_double
